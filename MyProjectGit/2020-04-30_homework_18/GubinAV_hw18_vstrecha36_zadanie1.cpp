// задание из файла "homework 18.pdf"
	//------------------------------------------

	//                        Домашнее задание №18

	// Тема: Структуры

	//                       Встреча №36. Задание 1

	//     Создайте структуру, описывающую комплексное число. Реализуйте
	// арифметические операции с комплексными числами: сумму, разность,
	// умножение, деление.

#include <iostream>
#include <clocale>

#define N "\n"
#define NN "\n\n"
#define NEL "\n" << endl

using namespace std;


//----------------------------------------------------------------------------------


struct COMPLEX					// тип - комплексное число
{
	int Re = 0;					// вещественная часть комплексного числа

	int Im = 0;					// мнимая часть комплексного числа
};

char stringC[24]{ '\0' };		// строка под вывод комплексного числа

//----------------------------------------------------------------------------------


COMPLEX z				// ФУНКЦИЯ для присвоения значений комплексного числа
(
	int Re,						// вещественная часть комплексного числа

	int Im						// мнимая часть комплексного числа
)
{
	COMPLEX Z;					// создадим структуру - комплексное число

	Z.Re = Re;					// присваивание вещественной части комплексного числа

	Z.Im = Im;					// присвоивание мнимой части комплексного числа

	return Z;					// возврат присваиваемой структуры комплексного числа
}


//----------------------------------------------------------------------------------


char* strC							// ФУНКЦИЯ перевода комплексного числа в строку
(
	COMPLEX C								// комплексное число
)
{
	for (size_t i = 0; i < 24; i++)			// обнуление строки
	{
		stringC[i] = '\0';
	}

	char buf[12]{ '\0' };					// вспомогательная строка

	size_t len = 0;							// длина строки

	size_t lenBuf = 0;						// длина вспомогательной строки

	bool extBit = false;					// признак последней единицы значения для INT_MIN

	if (C.Re < 0)							// указание знака "-" для Re
	{
		if (C.Re == INT_MIN)				// удаление последней единицы значения для INT_MIN
		{
			C.Re++;

			extBit = true;
		}

		C.Re = -C.Re;						
	
		stringC[len++] = '-';
	}

	do										// перевод Re в строку (в обратном порядке)
	{
		buf[lenBuf++] = (unsigned char)((C.Re % 10) + 48);

		C.Re /= 10;

	} while (C.Re);

	if (extBit)								// добавление последней единицы значения для INT_MIN
	{
		buf[0]++;
	
		extBit = false;
	}

	for (int i = --lenBuf; i >= 0; i--)		// переписывание строки Re в нормальном порядке
	{
		stringC[len++] = buf[i];
	}

	for (size_t i = 0; i < 12; i++)			// обнуление вспомогательной строки
	{
		buf[i] = '\0';
	}

	lenBuf = 0;								// обнуление длины вспомогательной строки

	if (C.Im < 0)							// указание знака "-" для Im 
	{
		if (C.Im == INT_MIN)				// удаление последней единицы значения для INT_MIN
		{
			C.Im++;

			extBit = true;
		}

		C.Im = -C.Im;

		stringC[len++] = '-';
	}
	else									// указание знака "+" для Im 
	{
		stringC[len++] = '+';
	}

	do										// перевод Im в строку (в обратном порядке)
	{
		buf[lenBuf++] = (unsigned char)((C.Im % 10) + 48);

		C.Im /= 10;

	} while (C.Im);

	if (extBit)								// добавление последней единицы значения для INT_MIN
	{
		buf[0]++;

		extBit = false;
	}

	for (int i = --lenBuf; i >= 0; i--)		// переписывание строки Im в нормальном порядке
	{
		stringC[len++] = buf[i];
	}

	stringC[len] = 'i';						// добавление символа "i" после Im

	return stringC;
}


//----------------------------------------------------------------------------------


COMPLEX sumC					// ФУНКЦИЯ сложения двух комплексных чисел
(
	COMPLEX A,							// комплексное число A

	COMPLEX B							// комплексное число B
)
{
	COMPLEX C;							// вспомогательное комплексное число C

	C.Re = A.Re + B.Re;					// вещественная часть комплексного числа

	C.Im = A.Im + B.Im;					// мнимая часть комплексного числа

	return C;							// вывод результата
}


//----------------------------------------------------------------------------------


COMPLEX difC					// ФУНКЦИЯ разности двух комплексных чисел
(
	COMPLEX A,							// комплексное число A

	COMPLEX B							// комплексное число B
)
{
	COMPLEX C;							// вспомогательное комплексное число C

	C.Re = A.Re - B.Re;					// вещественная часть комплексного числа

	C.Im = A.Im - B.Im;					// мнимая часть комплексного числа

	return C;							// вывод результата
}


//----------------------------------------------------------------------------------


COMPLEX mulC					// ФУНКЦИЯ умножения двух комплексных чисел
(
	COMPLEX A,							// комплексное число A

	COMPLEX B							// комплексное число B
)
{
	COMPLEX C;							// вспомогательное комплексное число C

	C.Re = A.Re * B.Re - A.Im * B.Im;	// вещественная часть комплексного числа

	C.Im = A.Im * B.Re + A.Re * B.Im;	// мнимая часть комплексного числа

	return C;							// вывод результата
}


//----------------------------------------------------------------------------------


COMPLEX divC					// ФУНКЦИЯ деления двух комплексных чисел
(
	COMPLEX A,							// комплексное число A

	COMPLEX B							// комплексное число B
)
{
	COMPLEX C;							// вспомогательное комплексное число C

	C.Re = (A.Re * B.Re + A.Im * B.Im) / (B.Re * B.Re + B.Im * B.Im);	// вещественная часть комплексного числа

	C.Im = (A.Im * B.Re - A.Re * B.Im) / (B.Re * B.Re + B.Im * B.Im);	// мнимая часть комплексного числа

	return C;							// вывод результата
}


//----------------------------------------------------------------------------------


int main()
{
	setlocale(LC_ALL, "ru");

	//------------------------------------------

	//                        Домашнее задание №18

	// Тема: Структуры

	//                       Встреча №36. Задание 1

	//     Создайте структуру, описывающую комплексное число. Реализуйте
	// арифметические операции с комплексными числами: сумму, разность,
	// умножение, деление.

	cout
		<< "                        Домашнее задание №18"

		NN " Тема: Структуры"

		NN "                       Встреча №36. Задание 1"

		NN "     Создайте структуру, описывающую комплексное число. Реализуйте"

		NN " арифметические операции с комплексными числами: сумму, разность,"

		NN " умножение, деление."

		<< NEL;

	COMPLEX a = z(-56, 78);						// комплексное число a

	COMPLEX b = z(12, -34);						// комплексное число b

	cout << " Арифметические действия с комплексными числами " << strC(a);
		
	cout << " и " << strC(b) << ":" << NEL;

	cout << " 1. Сложение:  (" << strC(a);
		
	cout << ") + (" << strC(b) << ") = (";
	
	cout << strC(sumC(a, b)) << ")" << NEL;

	cout << " 2. Вычитание: (" << strC(a);
	
	cout << ") - (" << strC(b) << ") = (";
	
	cout << strC(difC(a, b)) << ")" << NEL;

	cout << " 3. Умножение: (" << strC(a);
	
	cout << ") * (" << strC(b) << ") = (";
	
	cout << strC(mulC(a, b)) << ")" << NEL;

	cout << " 4. Деление:   (" << strC(a);
	
	cout << ") / (" << strC(b) << ") = (";
	
	cout << strC(divC(a, b)) << ")" << NEL;

	//------------------------------------------

	return 0;
}