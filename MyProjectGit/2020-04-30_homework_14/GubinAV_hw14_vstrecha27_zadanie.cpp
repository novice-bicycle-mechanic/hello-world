// задание из файла "homework 14.pdf"

// применены: typedef, typeid().name(), _msize(),
// функции-шаблоны, специализированные функции-шаблоны, ссылки-аргумены функции
// программа проверена с типами динамического массива: bool, char, int, float, double
// тип массива задается в строке 282

#include <iostream>
#include <Windows.h>
#include <iomanip>

#define N "\n"

using namespace std;


//--------------------------------------------------------------------------------------


template <typename T>			// ФУНКЦИЯ распределения динамической памяти

T* dynamicMemoryAllocation
(
	size_t length						// длина массива
)
{
	return new T[length]{};				// распределяем динамическую память
}


//--------------------------------------------------------------------------------------

//             Функции-шаблоны инициализации динамического массива


template <typename>			// ФУНКЦИЯ инициализации динамического массива типа bool

void initializingDynamicArray
(
	bool* dynamicArray,					// указатель на динамический массив типа bool

	size_t length						// длина массива
)
{
	bool b = false;

	for (size_t i = 0; i < length; i++)
	{
		dynamicArray[i] = b;

		b = !b;
	}
}

//-----------------------------

template <typename>			// ФУНКЦИЯ инициализации динамического массива типа char

void initializingDynamicArray
(
	char* dynamicArray,					// указатель на динамический массив типа char

	size_t length						// длина массива
)
{
	for (size_t i = 0, s = 97; i < length; i++, s++)
	{
		dynamicArray[i] = (char)s;

		if (s == 122) { s = 96; }
	}
}

//-----------------------------

template <typename T>			// ФУНКЦИЯ инициализации динамического массива заданного типа

void initializingDynamicArray
(
	T* dynamicArray,					// указатель на динамический массив заданного типа кроме bool и char,
										// для которых выше определены специализированные шаблоны-функции

	size_t length						// длина массива
)
{
	for (size_t i = 0; i < length; i++)
	{
		dynamicArray[i] = (T)i;
	}
}


//--------------------------------------------------------------------------------------


template <typename T>			// ФУНКЦИЯ печати динамического массива

void printingDynamicArray
(
	T* dynamicArray,					// указатель на динамический массив заданного типа 

	size_t length						// длина массива
)
{
	for (size_t i = 0; i < length; i++)
	{
		cout << " " << dynamicArray[i];
	}

	cout << N << endl;
}


//--------------------------------------------------------------------------------------

template <typename T>			// ФУНКЦИЯ удаления динамического массива

void delDynamicArray
(
	T* dynamicArray					// указатель на динамический массив заданного типа 
)
{
	delete[] dynamicArray;			// удалили динамический массив из памяти
}


//--------------------------------------------------------------------------------------


template <typename T>			// ФУНКЦИЯ добавления элемента в конец массива

void addElementToEndDynamicArray
(
	T*& dynamicArray,					// указатель на динамический массив заданного типа (ссылка)

	size_t& length,						// длина массива (ссылка)

	T newLastElement = 0				// добавляемый в конец динамического массива элемент
)
{
	T* newArray = dynamicMemoryAllocation<T>(++length);		// создали новый массив

	for (size_t i = 0; i < (length-1); i++)
	{
		newArray[i] = dynamicArray[i];				// скопировали значения из старого массива в новый
	}

	newArray[(size_t)(length-1)] = newLastElement;	// заполнили значение нового последнего элемента

	delDynamicArray<T>(dynamicArray);				// удалили старый динамический массив

	dynamicArray = newArray;						// задали в старом указателе адрес нового массива

	newArray = nullptr;								// обнулили новый указатель
}


//--------------------------------------------------------------------------------------


template <typename T>			// ФУНКЦИЯ вставки элемента внутрь динамического массива

void insElementIntoDynamicArray
(
	T*& dynamicArray,					// указатель на динамический массив заданного типа (ссылка)

	size_t& length,						// длина массива (ссылка)

	size_t numElemIns,					// номер вставляемого в динамический массив элемента

	T newLastElement = 0				// вставляемый в динамический массив элемент
)
{
	if ((0 <= numElemIns) && (numElemIns < length))		// проверили, что номер вставляемого элемента
														// находится в диапазоне существующих номеров
	{													// элементов
		T* newArray = dynamicMemoryAllocation<T>(++length);				// создали новый массив

		for (size_t i = 0; i < numElemIns; i++)			// скопировали значения из старого массива в новый
		{
			newArray[i] = dynamicArray[i];				// до вставляемого элемента
		}

		newArray[numElemIns] = newLastElement;			// заполнили значение вставляемого элемента

		for (size_t i = (numElemIns + 1); i < length; i++)	// скопировали значения из старого массива в новый
		{
			newArray[i] = dynamicArray[(i - 1)];		// после вставляемого элемента
		}

		delDynamicArray<T>(dynamicArray);				// удалили старый динамический массив

		dynamicArray = newArray;						// задали в старом указателе адрес нового массива

		newArray = nullptr;								// обнулили новый указатель
	}
}


//--------------------------------------------------------------------------------------


template <typename T>			// ФУНКЦИЯ удаления элемента внутри динамического массива

void delElementFromDynamicArray
(
	T*& dynamicArray,					// указатель на динамический массив заданного типа (ссылка)

	size_t& length,						// длина массива (ссылка)

	size_t numElemIns					// номер удаляемого из динамического массива элемента
)
{
	if ((0 <= numElemIns) && (numElemIns < length))		// проверили, что номер удаляемого элемента
														// находится в диапазоне существующих номеров
	{													// элементов
		T* newArray = dynamicMemoryAllocation<T>(--length);				// создали новый массив

		for (size_t i = 0; i < numElemIns; i++)			// скопировали значения из старого массива в новый
		{
			newArray[i] = dynamicArray[i];				// до удаляемого элемента
		}

		for (size_t i = numElemIns; i < length; i++)	// скопировали значения из старого массива в новый
		{
			newArray[i] = dynamicArray[(i + 1)];		// после удаляемого элемента
		}

		delDynamicArray<T>(dynamicArray);				// удалили старый динамический массив

		dynamicArray = newArray;						// задали в старом указателе адрес нового массива

		newArray = nullptr;								// обнулили новый указатель
	}
}


//--------------------------------------------------------------------------------------


int main()
{
	SetConsoleOutputCP(1251);

	//-----------------------------------------------

	//                         Домашнее задание №14

	// Тема: Указатели. Передача параметров.

	//                         Встреча №27. Задание

	//     Написать следующие функции для работы с динамическим массивом:

	// • Функция распределения динамической памяти
	// • Функция инициализации динамического массива
	// • Функция печати динамического массива
	// • Функция удаления динамического массива
	// • Функция добавления элемента в конец массива
	// • Функция вставки элемента по указанному индексу
	// • Функция удаления элемента по указанному индексу

	cout
		<< "                         Домашнее задание №14"

		N N" Тема: Указатели. Передача параметров."

		N N"                         Встреча №27. Задание"

		N N"     Написать следующие функции для работы с динамическим массивом:"

		N N" • Функция распределения динамической памяти"
		N  " • Функция инициализации динамического массива"
		N  " • Функция печати динамического массива"
		N  " • Функция удаления динамического массива"
		N  " • Функция добавления элемента в конец массива"
		N  " • Функция вставки элемента по указанному индексу"
		N  " • Функция удаления элемента по указанному индексу"

		<< N << endl;

	typedef char typeArr;						// задаем тип динамического массива и псевдоним типа

	size_t length = 10;							// длина/размер динамического массива

	cout
		<< " Объявляем динамический массив типа "
		
		<< typeid(typeArr).name()

		<< " в " << length << " элементов."
		
		<< N << endl;

	// объявляем динамический массив

	// и распределяем под него динамическую память

	typeArr* dynamicArray							// указатель на динамический массив заданного типа
		
		= dynamicMemoryAllocation<typeArr>(length);	// распределяем динамическую память

	cout
		<< " Под объявленный массив распределено "

		<< _msize(dynamicArray)

		<< " байт памяти"
		
		<< N << endl;

	// инициализация динамического массива возрастающими значениями

	initializingDynamicArray<typeArr>(dynamicArray, length);

	cout << " Инициализируем и рапечатываем динамический массив:" << N << endl;

	// распечатаем динамический массив

	printingDynamicArray<typeArr>(dynamicArray, length);

	// добавление элемента в конец массива

	cout << " Добавим элемент <111> в конец массива:" << N << endl;

	addElementToEndDynamicArray<typeArr>(dynamicArray, length, (typeArr)111);

	// распечатаем динамический массив

	printingDynamicArray<typeArr>(dynamicArray, length);

	// вставим элемент в позицию <4> динамического массива

	cout << " Вставим элемент <222> в позицию <4> массива:" << N << endl;

	insElementIntoDynamicArray(dynamicArray, length, 4, (typeArr)222);

	// распечатаем динамический массив

	printingDynamicArray<typeArr>(dynamicArray, length);

	// удалим элемент в позиции <7> динамического массива

	cout << " Удалим элемент в позиции <7> массива:" << N << endl;

	delElementFromDynamicArray(dynamicArray, length, 7);

	// распечатаем динамический массив

	printingDynamicArray<typeArr>(dynamicArray, length);

	// удаляем динамический массив в конце программы

	delDynamicArray<typeArr>(dynamicArray);

	cout << " Массив удален" << N << endl;

	// обнулим указатель на динамический массив

	dynamicArray = nullptr;

	//-----------------------------------------------

	return 0;
}
