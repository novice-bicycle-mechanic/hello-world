// doublyLinkedList.cpp

#include <iostream>
#include <clocale>
#include <conio.h>

#define N "\n"

using namespace std;


//-------------------------------------------------------------------------


struct Item					// структура типа элемента двусвязного списка
{
	int num = 0;				// номер элемента

	Item* next = nullptr;			// указатель на следующий элемент двусвязного списка

	Item* prev = nullptr;			// указатель на предыдущий элемент двусвязного списка
};


//-------------------------------------------------------------------------


int itemNumber					// ФУНКЦИЯ генерации номера элемента списка
(
	bool notReset				// ключ 1/0 не обнуления статической переменной number
)
{
	static int number = 0;		// номер элемента

	return (notReset) ? (++number) : (number = 0);
}


//-------------------------------------------------------------------------


void listOutput					// ФУНКЦИЯ вывода списка на экран
(
	Item* List					// указатель на список
)
{
	if (List)								// проверка наличия списка
	{
		Item* buf = List;					// вспомогательный указатель на список

		cout << " Список >";

		while ((buf->next) != nullptr)		// вывод списка
		{
			cout << " " << buf->num;

			buf = buf->next;
		}

		cout << " " << buf->num << N << endl;
	}
	else 
	{
		cout << " Список отсутствует" << N << endl;
	}
}


//-------------------------------------------------------------------------


void outBackAndForth			// ФУНКЦИЯ прохода по списку туда и обратно
(
	Item* List					// указатель на список
)
{

	Item* buf = List;			// вспомогательный указатель на список

	cout << " Проход по списку туда и обратно >";

	while ((buf->next) != nullptr)		// вывод списка в направлении "туда"
	{
		cout << " " << buf->num;

		buf = buf->next;
	}

	while ((buf->prev) != nullptr)		// вывод списка в направлении "обратно"
	{
		cout << " " << buf->num;

		buf = buf->prev;
	}

	cout << " " << buf->num << N << endl; // вывод элемента от последнего указателя
}


//-------------------------------------------------------------------------


void addItem					// ФУНКЦИЯ добавления элемента в список
(
	Item* List					// указатель на список
)
{
	Item* listItem = new Item;			// выделим память под элемент списка

	Item* buf = List;					// вспомогательный указатель

	listItem->num = itemNumber(1);		// задаем номер элементу

	while ((buf->next) != nullptr)		// идем до последнего элемента списка
	{
		buf = buf->next;				// записываем указатель на следующий элемент
	}

	buf->next = listItem;		// записываем указатель на новый последний элемент

	listItem->prev = buf;		// записываем указатель на предыдущий (старый последний) элемент
}


//-------------------------------------------------------------------------


void delItem					// ФУНКЦИЯ удаления элемента из списка
(
	Item* List					// указатель на список
)
{
	Item* buf = List;			// вспомогательный указатель

	while ((buf->next) != nullptr)	// идем в конец списка
	{
		buf = buf->next;		// записываем указатель на следующий элемент
	}

	buf = buf->prev;			// идем на предпоследний элемент списка

	delete buf->next;			// очищаем память от последнего элемента списка

	buf->next = nullptr;		// очищаем указатель нового последнего элемента на следующий элемент
}


//-------------------------------------------------------------------------


void delItemN					// ФУНКЦИЯ удаления N элементов из списка
(
	Item* List,					// указатель на список

	size_t length				// количество удаляемых элементов
)
{
	Item* buf = List;			// вспомогательный указатель

	size_t num = 0;				// количество элементов в списке

	while ((buf->next) != nullptr)	// считаем количество элементов в списке
	{
		buf = buf->next;

		num++;
	}

	while ((num) && (length))	// удаляем последние элементы пока
	{							// один из счетчиков не достигнет нуля
		delItem(List);

		num--;

		length--;
	}
}


//-------------------------------------------------------------------------


void delList					// ФУНКЦИЯ удаления всех элементов списка
(
	Item* List					// указатель на список
)
{
	Item* buf = List;			// вспомогательный указатель

	int num = 1;				// количество элементов в списке

	while ((buf->next) != nullptr)	// считаем кол-во элементов в списке
	{
		num++;

		buf = buf->next;
	}

	while (num > 1)				// удаление элементов списка
	{
		buf = buf->prev;		// встаем на предпоследний элемнт

		delete buf->next;		// удаляем последний элемент

		buf->next = nullptr;	// обноляем последний указатель на следующий элемент

		listOutput(List);		// с выводом списка на экран
								// после каждого удаления
		num--;
	}

	delete List;				// очищаем память 

	List = nullptr;				// обнуляем указатель на список

	listOutput(List);			// вывод списка на экран
}


//-------------------------------------------------------------------------


int main()
{
	setlocale(LC_ALL, "ru");

	//--------------------------------------

	size_t length = 0;							// количество добавляемых элементов списка

	Item* List = new Item;

	List->num = itemNumber(1);					// присвоить номер 1 первому элементу списка

	cout << " Создан двусвязный список из одного элемента" << N << endl;

	listOutput(List);							// вывод списка на экран

	cout << " К двусвязному списку добавлен один элемент" << N << endl;

	addItem(List);								// добавить элемент к списку

	listOutput(List);							// вывод списка на экран

	cout << " Укажите количество добавляемых элементов списка: ";

	cin >> length;

	cout << endl;

	for (size_t i = 0; i < length; i++)			// добавляем элементы к списку
	{
		addItem(List);
	}

	listOutput(List);							// вывод списка на экран

	cout
		<< " Вывод элементов двусвязного списка в порядке внутренних указателей,"

		N N"     сначала от первого к следующему, и так до последнего,"

		N N"     затем от последнего к предыдущему, и так до первого."

		<< N << endl;

	outBackAndForth(List);		// вывод элементов списка от первого к последнему и обратно

	cout << " У двусвязного списка удален один элемент" << N << endl;

	delItem(List);				// удаление одного элемента двусвязного списка

	listOutput(List);			// вывод списка на экран

	outBackAndForth(List);		// вывод элементов списка от первого к последнему и обратно

	cout << " Укажите количество удаляемых элементов списка: ";

	cin >> length;

	cout << endl;

	delItemN(List, length);		// удалить указанное количество элементов списка, но не первый

	listOutput(List);			// вывод списка на экран

	outBackAndForth(List);		// вывод элементов списка от первого к последнему и обратно

	cout << " Удаление всех элементов списка - удаление всего списка" << N << endl;

	delList(List);				// удаление всех элементов списка и самого списка

	//--------------------------------------

	return 0;
}
